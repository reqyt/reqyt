// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// FunctionCall is an object representing the database table.
type FunctionCall struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	FunctionID int64     `boil:"function_id" json:"function_id" toml:"function_id" yaml:"function_id"`
	WalletID   int64     `boil:"wallet_id" json:"wallet_id" toml:"wallet_id" yaml:"wallet_id"`
	Credits    int64     `boil:"credits" json:"credits" toml:"credits" yaml:"credits"`

	R *functionCallR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L functionCallL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FunctionCallColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	FunctionID string
	WalletID   string
	Credits    string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
	FunctionID: "function_id",
	WalletID:   "wallet_id",
	Credits:    "credits",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FunctionCallWhere = struct {
	ID         whereHelperint64
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
	FunctionID whereHelperint64
	WalletID   whereHelperint64
	Credits    whereHelperint64
}{
	ID:         whereHelperint64{field: "\"function_calls\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"function_calls\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"function_calls\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"function_calls\".\"deleted_at\""},
	FunctionID: whereHelperint64{field: "\"function_calls\".\"function_id\""},
	WalletID:   whereHelperint64{field: "\"function_calls\".\"wallet_id\""},
	Credits:    whereHelperint64{field: "\"function_calls\".\"credits\""},
}

// FunctionCallRels is where relationship names are stored.
var FunctionCallRels = struct {
	Wallet   string
	Function string
}{
	Wallet:   "Wallet",
	Function: "Function",
}

// functionCallR is where relationships are stored.
type functionCallR struct {
	Wallet   *Function
	Function *Function
}

// NewStruct creates a new relationship struct
func (*functionCallR) NewStruct() *functionCallR {
	return &functionCallR{}
}

// functionCallL is where Load methods for each relationship are stored.
type functionCallL struct{}

var (
	functionCallAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "function_id", "wallet_id", "credits"}
	functionCallColumnsWithoutDefault = []string{}
	functionCallColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "function_id", "wallet_id", "credits"}
	functionCallPrimaryKeyColumns     = []string{"id"}
)

type (
	// FunctionCallSlice is an alias for a slice of pointers to FunctionCall.
	// This should generally be used opposed to []FunctionCall.
	FunctionCallSlice []*FunctionCall
	// FunctionCallHook is the signature for custom FunctionCall hook methods
	FunctionCallHook func(context.Context, boil.ContextExecutor, *FunctionCall) error

	functionCallQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	functionCallType                 = reflect.TypeOf(&FunctionCall{})
	functionCallMapping              = queries.MakeStructMapping(functionCallType)
	functionCallPrimaryKeyMapping, _ = queries.BindMapping(functionCallType, functionCallMapping, functionCallPrimaryKeyColumns)
	functionCallInsertCacheMut       sync.RWMutex
	functionCallInsertCache          = make(map[string]insertCache)
	functionCallUpdateCacheMut       sync.RWMutex
	functionCallUpdateCache          = make(map[string]updateCache)
	functionCallUpsertCacheMut       sync.RWMutex
	functionCallUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var functionCallBeforeInsertHooks []FunctionCallHook
var functionCallBeforeUpdateHooks []FunctionCallHook
var functionCallBeforeDeleteHooks []FunctionCallHook
var functionCallBeforeUpsertHooks []FunctionCallHook

var functionCallAfterInsertHooks []FunctionCallHook
var functionCallAfterSelectHooks []FunctionCallHook
var functionCallAfterUpdateHooks []FunctionCallHook
var functionCallAfterDeleteHooks []FunctionCallHook
var functionCallAfterUpsertHooks []FunctionCallHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FunctionCall) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FunctionCall) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FunctionCall) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FunctionCall) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FunctionCall) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FunctionCall) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FunctionCall) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FunctionCall) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FunctionCall) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionCallAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFunctionCallHook registers your hook function for all future operations.
func AddFunctionCallHook(hookPoint boil.HookPoint, functionCallHook FunctionCallHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		functionCallBeforeInsertHooks = append(functionCallBeforeInsertHooks, functionCallHook)
	case boil.BeforeUpdateHook:
		functionCallBeforeUpdateHooks = append(functionCallBeforeUpdateHooks, functionCallHook)
	case boil.BeforeDeleteHook:
		functionCallBeforeDeleteHooks = append(functionCallBeforeDeleteHooks, functionCallHook)
	case boil.BeforeUpsertHook:
		functionCallBeforeUpsertHooks = append(functionCallBeforeUpsertHooks, functionCallHook)
	case boil.AfterInsertHook:
		functionCallAfterInsertHooks = append(functionCallAfterInsertHooks, functionCallHook)
	case boil.AfterSelectHook:
		functionCallAfterSelectHooks = append(functionCallAfterSelectHooks, functionCallHook)
	case boil.AfterUpdateHook:
		functionCallAfterUpdateHooks = append(functionCallAfterUpdateHooks, functionCallHook)
	case boil.AfterDeleteHook:
		functionCallAfterDeleteHooks = append(functionCallAfterDeleteHooks, functionCallHook)
	case boil.AfterUpsertHook:
		functionCallAfterUpsertHooks = append(functionCallAfterUpsertHooks, functionCallHook)
	}
}

// OneG returns a single functionCall record from the query using the global executor.
func (q functionCallQuery) OneG(ctx context.Context) (*FunctionCall, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single functionCall record from the query.
func (q functionCallQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FunctionCall, error) {
	o := &FunctionCall{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for function_calls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FunctionCall records from the query using the global executor.
func (q functionCallQuery) AllG(ctx context.Context) (FunctionCallSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FunctionCall records from the query.
func (q functionCallQuery) All(ctx context.Context, exec boil.ContextExecutor) (FunctionCallSlice, error) {
	var o []*FunctionCall

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FunctionCall slice")
	}

	if len(functionCallAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FunctionCall records in the query, and panics on error.
func (q functionCallQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FunctionCall records in the query.
func (q functionCallQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count function_calls rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q functionCallQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q functionCallQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if function_calls exists")
	}

	return count > 0, nil
}

// Wallet pointed to by the foreign key.
func (o *FunctionCall) Wallet(mods ...qm.QueryMod) functionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WalletID),
	}

	queryMods = append(queryMods, mods...)

	query := Functions(queryMods...)
	queries.SetFrom(query.Query, "\"functions\"")

	return query
}

// Function pointed to by the foreign key.
func (o *FunctionCall) Function(mods ...qm.QueryMod) functionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FunctionID),
	}

	queryMods = append(queryMods, mods...)

	query := Functions(queryMods...)
	queries.SetFrom(query.Query, "\"functions\"")

	return query
}

// LoadWallet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (functionCallL) LoadWallet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFunctionCall interface{}, mods queries.Applicator) error {
	var slice []*FunctionCall
	var object *FunctionCall

	if singular {
		object = maybeFunctionCall.(*FunctionCall)
	} else {
		slice = *maybeFunctionCall.(*[]*FunctionCall)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &functionCallR{}
		}
		args = append(args, object.WalletID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &functionCallR{}
			}

			for _, a := range args {
				if a == obj.WalletID {
					continue Outer
				}
			}

			args = append(args, obj.WalletID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`functions`), qm.WhereIn(`functions.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Function")
	}

	var resultSlice []*Function
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Function")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for functions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for functions")
	}

	if len(functionCallAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Wallet = foreign
		if foreign.R == nil {
			foreign.R = &functionR{}
		}
		foreign.R.WalletFunctionCalls = append(foreign.R.WalletFunctionCalls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WalletID == foreign.ID {
				local.R.Wallet = foreign
				if foreign.R == nil {
					foreign.R = &functionR{}
				}
				foreign.R.WalletFunctionCalls = append(foreign.R.WalletFunctionCalls, local)
				break
			}
		}
	}

	return nil
}

// LoadFunction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (functionCallL) LoadFunction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFunctionCall interface{}, mods queries.Applicator) error {
	var slice []*FunctionCall
	var object *FunctionCall

	if singular {
		object = maybeFunctionCall.(*FunctionCall)
	} else {
		slice = *maybeFunctionCall.(*[]*FunctionCall)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &functionCallR{}
		}
		args = append(args, object.FunctionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &functionCallR{}
			}

			for _, a := range args {
				if a == obj.FunctionID {
					continue Outer
				}
			}

			args = append(args, obj.FunctionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`functions`), qm.WhereIn(`functions.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Function")
	}

	var resultSlice []*Function
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Function")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for functions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for functions")
	}

	if len(functionCallAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Function = foreign
		if foreign.R == nil {
			foreign.R = &functionR{}
		}
		foreign.R.FunctionCalls = append(foreign.R.FunctionCalls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FunctionID == foreign.ID {
				local.R.Function = foreign
				if foreign.R == nil {
					foreign.R = &functionR{}
				}
				foreign.R.FunctionCalls = append(foreign.R.FunctionCalls, local)
				break
			}
		}
	}

	return nil
}

// SetWalletG of the functionCall to the related item.
// Sets o.R.Wallet to related.
// Adds o to related.R.WalletFunctionCalls.
// Uses the global database handle.
func (o *FunctionCall) SetWalletG(ctx context.Context, insert bool, related *Function) error {
	return o.SetWallet(ctx, boil.GetContextDB(), insert, related)
}

// SetWallet of the functionCall to the related item.
// Sets o.R.Wallet to related.
// Adds o to related.R.WalletFunctionCalls.
func (o *FunctionCall) SetWallet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Function) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"function_calls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"wallet_id"}),
		strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WalletID = related.ID
	if o.R == nil {
		o.R = &functionCallR{
			Wallet: related,
		}
	} else {
		o.R.Wallet = related
	}

	if related.R == nil {
		related.R = &functionR{
			WalletFunctionCalls: FunctionCallSlice{o},
		}
	} else {
		related.R.WalletFunctionCalls = append(related.R.WalletFunctionCalls, o)
	}

	return nil
}

// SetFunctionG of the functionCall to the related item.
// Sets o.R.Function to related.
// Adds o to related.R.FunctionCalls.
// Uses the global database handle.
func (o *FunctionCall) SetFunctionG(ctx context.Context, insert bool, related *Function) error {
	return o.SetFunction(ctx, boil.GetContextDB(), insert, related)
}

// SetFunction of the functionCall to the related item.
// Sets o.R.Function to related.
// Adds o to related.R.FunctionCalls.
func (o *FunctionCall) SetFunction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Function) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"function_calls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"function_id"}),
		strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FunctionID = related.ID
	if o.R == nil {
		o.R = &functionCallR{
			Function: related,
		}
	} else {
		o.R.Function = related
	}

	if related.R == nil {
		related.R = &functionR{
			FunctionCalls: FunctionCallSlice{o},
		}
	} else {
		related.R.FunctionCalls = append(related.R.FunctionCalls, o)
	}

	return nil
}

// FunctionCalls retrieves all the records using an executor.
func FunctionCalls(mods ...qm.QueryMod) functionCallQuery {
	mods = append(mods, qm.From("\"function_calls\""))
	return functionCallQuery{NewQuery(mods...)}
}

// FindFunctionCallG retrieves a single record by ID.
func FindFunctionCallG(ctx context.Context, iD int64, selectCols ...string) (*FunctionCall, error) {
	return FindFunctionCall(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFunctionCall retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFunctionCall(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*FunctionCall, error) {
	functionCallObj := &FunctionCall{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"function_calls\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, functionCallObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from function_calls")
	}

	return functionCallObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FunctionCall) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FunctionCall) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no function_calls provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(functionCallColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	functionCallInsertCacheMut.RLock()
	cache, cached := functionCallInsertCache[key]
	functionCallInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			functionCallAllColumns,
			functionCallColumnsWithDefault,
			functionCallColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(functionCallType, functionCallMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(functionCallType, functionCallMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"function_calls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"function_calls\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"function_calls\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into function_calls")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == functionCallMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for function_calls")
	}

CacheNoHooks:
	if !cached {
		functionCallInsertCacheMut.Lock()
		functionCallInsertCache[key] = cache
		functionCallInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FunctionCall record using the global executor.
// See Update for more documentation.
func (o *FunctionCall) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FunctionCall.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FunctionCall) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	functionCallUpdateCacheMut.RLock()
	cache, cached := functionCallUpdateCache[key]
	functionCallUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			functionCallAllColumns,
			functionCallPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update function_calls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"function_calls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(functionCallType, functionCallMapping, append(wl, functionCallPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update function_calls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for function_calls")
	}

	if !cached {
		functionCallUpdateCacheMut.Lock()
		functionCallUpdateCache[key] = cache
		functionCallUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q functionCallQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q functionCallQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for function_calls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for function_calls")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FunctionCallSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FunctionCallSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionCallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"function_calls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionCallPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in functionCall slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all functionCall")
	}
	return rowsAff, nil
}

// DeleteG deletes a single FunctionCall record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FunctionCall) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FunctionCall record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FunctionCall) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FunctionCall provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), functionCallPrimaryKeyMapping)
	sql := "DELETE FROM \"function_calls\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from function_calls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for function_calls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q functionCallQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no functionCallQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from function_calls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for function_calls")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FunctionCallSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FunctionCallSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(functionCallBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionCallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"function_calls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionCallPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from functionCall slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for function_calls")
	}

	if len(functionCallAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FunctionCall) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FunctionCall provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FunctionCall) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFunctionCall(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunctionCallSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FunctionCallSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunctionCallSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FunctionCallSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionCallPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"function_calls\".* FROM \"function_calls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionCallPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FunctionCallSlice")
	}

	*o = slice

	return nil
}

// FunctionCallExistsG checks if the FunctionCall row exists.
func FunctionCallExistsG(ctx context.Context, iD int64) (bool, error) {
	return FunctionCallExists(ctx, boil.GetContextDB(), iD)
}

// FunctionCallExists checks if the FunctionCall row exists.
func FunctionCallExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"function_calls\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if function_calls exists")
	}

	return exists, nil
}
