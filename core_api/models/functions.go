// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Function is an object representing the database table.
type Function struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Slug        string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Description string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Cost        int64       `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Endpoint    null.String `boil:"endpoint" json:"endpoint,omitempty" toml:"endpoint" yaml:"endpoint,omitempty"`

	R *functionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L functionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FunctionColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Slug        string
	Description string
	Name        string
	Cost        string
	Endpoint    string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	Slug:        "slug",
	Description: "description",
	Name:        "name",
	Cost:        "cost",
	Endpoint:    "endpoint",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FunctionWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	Slug        whereHelperstring
	Description whereHelperstring
	Name        whereHelperstring
	Cost        whereHelperint64
	Endpoint    whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"functions\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"functions\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"functions\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"functions\".\"deleted_at\""},
	Slug:        whereHelperstring{field: "\"functions\".\"slug\""},
	Description: whereHelperstring{field: "\"functions\".\"description\""},
	Name:        whereHelperstring{field: "\"functions\".\"name\""},
	Cost:        whereHelperint64{field: "\"functions\".\"cost\""},
	Endpoint:    whereHelpernull_String{field: "\"functions\".\"endpoint\""},
}

// FunctionRels is where relationship names are stored.
var FunctionRels = struct {
	WalletFunctionCalls string
	FunctionCalls       string
}{
	WalletFunctionCalls: "WalletFunctionCalls",
	FunctionCalls:       "FunctionCalls",
}

// functionR is where relationships are stored.
type functionR struct {
	WalletFunctionCalls FunctionCallSlice
	FunctionCalls       FunctionCallSlice
}

// NewStruct creates a new relationship struct
func (*functionR) NewStruct() *functionR {
	return &functionR{}
}

// functionL is where Load methods for each relationship are stored.
type functionL struct{}

var (
	functionAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "slug", "description", "name", "cost", "endpoint"}
	functionColumnsWithoutDefault = []string{}
	functionColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "slug", "description", "name", "cost", "endpoint"}
	functionPrimaryKeyColumns     = []string{"id"}
)

type (
	// FunctionSlice is an alias for a slice of pointers to Function.
	// This should generally be used opposed to []Function.
	FunctionSlice []*Function
	// FunctionHook is the signature for custom Function hook methods
	FunctionHook func(context.Context, boil.ContextExecutor, *Function) error

	functionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	functionType                 = reflect.TypeOf(&Function{})
	functionMapping              = queries.MakeStructMapping(functionType)
	functionPrimaryKeyMapping, _ = queries.BindMapping(functionType, functionMapping, functionPrimaryKeyColumns)
	functionInsertCacheMut       sync.RWMutex
	functionInsertCache          = make(map[string]insertCache)
	functionUpdateCacheMut       sync.RWMutex
	functionUpdateCache          = make(map[string]updateCache)
	functionUpsertCacheMut       sync.RWMutex
	functionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var functionBeforeInsertHooks []FunctionHook
var functionBeforeUpdateHooks []FunctionHook
var functionBeforeDeleteHooks []FunctionHook
var functionBeforeUpsertHooks []FunctionHook

var functionAfterInsertHooks []FunctionHook
var functionAfterSelectHooks []FunctionHook
var functionAfterUpdateHooks []FunctionHook
var functionAfterDeleteHooks []FunctionHook
var functionAfterUpsertHooks []FunctionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Function) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Function) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Function) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Function) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Function) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Function) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Function) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Function) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Function) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range functionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFunctionHook registers your hook function for all future operations.
func AddFunctionHook(hookPoint boil.HookPoint, functionHook FunctionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		functionBeforeInsertHooks = append(functionBeforeInsertHooks, functionHook)
	case boil.BeforeUpdateHook:
		functionBeforeUpdateHooks = append(functionBeforeUpdateHooks, functionHook)
	case boil.BeforeDeleteHook:
		functionBeforeDeleteHooks = append(functionBeforeDeleteHooks, functionHook)
	case boil.BeforeUpsertHook:
		functionBeforeUpsertHooks = append(functionBeforeUpsertHooks, functionHook)
	case boil.AfterInsertHook:
		functionAfterInsertHooks = append(functionAfterInsertHooks, functionHook)
	case boil.AfterSelectHook:
		functionAfterSelectHooks = append(functionAfterSelectHooks, functionHook)
	case boil.AfterUpdateHook:
		functionAfterUpdateHooks = append(functionAfterUpdateHooks, functionHook)
	case boil.AfterDeleteHook:
		functionAfterDeleteHooks = append(functionAfterDeleteHooks, functionHook)
	case boil.AfterUpsertHook:
		functionAfterUpsertHooks = append(functionAfterUpsertHooks, functionHook)
	}
}

// OneG returns a single function record from the query using the global executor.
func (q functionQuery) OneG(ctx context.Context) (*Function, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single function record from the query.
func (q functionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Function, error) {
	o := &Function{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for functions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Function records from the query using the global executor.
func (q functionQuery) AllG(ctx context.Context) (FunctionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Function records from the query.
func (q functionQuery) All(ctx context.Context, exec boil.ContextExecutor) (FunctionSlice, error) {
	var o []*Function

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Function slice")
	}

	if len(functionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Function records in the query, and panics on error.
func (q functionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Function records in the query.
func (q functionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count functions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q functionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q functionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if functions exists")
	}

	return count > 0, nil
}

// WalletFunctionCalls retrieves all the function_call's FunctionCalls with an executor via wallet_id column.
func (o *Function) WalletFunctionCalls(mods ...qm.QueryMod) functionCallQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"function_calls\".\"wallet_id\"=?", o.ID),
	)

	query := FunctionCalls(queryMods...)
	queries.SetFrom(query.Query, "\"function_calls\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"function_calls\".*"})
	}

	return query
}

// FunctionCalls retrieves all the function_call's FunctionCalls with an executor.
func (o *Function) FunctionCalls(mods ...qm.QueryMod) functionCallQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"function_calls\".\"function_id\"=?", o.ID),
	)

	query := FunctionCalls(queryMods...)
	queries.SetFrom(query.Query, "\"function_calls\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"function_calls\".*"})
	}

	return query
}

// LoadWalletFunctionCalls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (functionL) LoadWalletFunctionCalls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFunction interface{}, mods queries.Applicator) error {
	var slice []*Function
	var object *Function

	if singular {
		object = maybeFunction.(*Function)
	} else {
		slice = *maybeFunction.(*[]*Function)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &functionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &functionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`function_calls`), qm.WhereIn(`function_calls.wallet_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load function_calls")
	}

	var resultSlice []*FunctionCall
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice function_calls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on function_calls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for function_calls")
	}

	if len(functionCallAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WalletFunctionCalls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &functionCallR{}
			}
			foreign.R.Wallet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WalletID {
				local.R.WalletFunctionCalls = append(local.R.WalletFunctionCalls, foreign)
				if foreign.R == nil {
					foreign.R = &functionCallR{}
				}
				foreign.R.Wallet = local
				break
			}
		}
	}

	return nil
}

// LoadFunctionCalls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (functionL) LoadFunctionCalls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFunction interface{}, mods queries.Applicator) error {
	var slice []*Function
	var object *Function

	if singular {
		object = maybeFunction.(*Function)
	} else {
		slice = *maybeFunction.(*[]*Function)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &functionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &functionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`function_calls`), qm.WhereIn(`function_calls.function_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load function_calls")
	}

	var resultSlice []*FunctionCall
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice function_calls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on function_calls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for function_calls")
	}

	if len(functionCallAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FunctionCalls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &functionCallR{}
			}
			foreign.R.Function = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FunctionID {
				local.R.FunctionCalls = append(local.R.FunctionCalls, foreign)
				if foreign.R == nil {
					foreign.R = &functionCallR{}
				}
				foreign.R.Function = local
				break
			}
		}
	}

	return nil
}

// AddWalletFunctionCallsG adds the given related objects to the existing relationships
// of the function, optionally inserting them as new records.
// Appends related to o.R.WalletFunctionCalls.
// Sets related.R.Wallet appropriately.
// Uses the global database handle.
func (o *Function) AddWalletFunctionCallsG(ctx context.Context, insert bool, related ...*FunctionCall) error {
	return o.AddWalletFunctionCalls(ctx, boil.GetContextDB(), insert, related...)
}

// AddWalletFunctionCalls adds the given related objects to the existing relationships
// of the function, optionally inserting them as new records.
// Appends related to o.R.WalletFunctionCalls.
// Sets related.R.Wallet appropriately.
func (o *Function) AddWalletFunctionCalls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FunctionCall) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WalletID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"function_calls\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"wallet_id"}),
				strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WalletID = o.ID
		}
	}

	if o.R == nil {
		o.R = &functionR{
			WalletFunctionCalls: related,
		}
	} else {
		o.R.WalletFunctionCalls = append(o.R.WalletFunctionCalls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &functionCallR{
				Wallet: o,
			}
		} else {
			rel.R.Wallet = o
		}
	}
	return nil
}

// AddFunctionCallsG adds the given related objects to the existing relationships
// of the function, optionally inserting them as new records.
// Appends related to o.R.FunctionCalls.
// Sets related.R.Function appropriately.
// Uses the global database handle.
func (o *Function) AddFunctionCallsG(ctx context.Context, insert bool, related ...*FunctionCall) error {
	return o.AddFunctionCalls(ctx, boil.GetContextDB(), insert, related...)
}

// AddFunctionCalls adds the given related objects to the existing relationships
// of the function, optionally inserting them as new records.
// Appends related to o.R.FunctionCalls.
// Sets related.R.Function appropriately.
func (o *Function) AddFunctionCalls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FunctionCall) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FunctionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"function_calls\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"function_id"}),
				strmangle.WhereClause("\"", "\"", 0, functionCallPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FunctionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &functionR{
			FunctionCalls: related,
		}
	} else {
		o.R.FunctionCalls = append(o.R.FunctionCalls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &functionCallR{
				Function: o,
			}
		} else {
			rel.R.Function = o
		}
	}
	return nil
}

// Functions retrieves all the records using an executor.
func Functions(mods ...qm.QueryMod) functionQuery {
	mods = append(mods, qm.From("\"functions\""))
	return functionQuery{NewQuery(mods...)}
}

// FindFunctionG retrieves a single record by ID.
func FindFunctionG(ctx context.Context, iD int64, selectCols ...string) (*Function, error) {
	return FindFunction(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFunction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFunction(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Function, error) {
	functionObj := &Function{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"functions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, functionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from functions")
	}

	return functionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Function) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Function) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no functions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(functionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	functionInsertCacheMut.RLock()
	cache, cached := functionInsertCache[key]
	functionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			functionAllColumns,
			functionColumnsWithDefault,
			functionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(functionType, functionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(functionType, functionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"functions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"functions\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"functions\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, functionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into functions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == functionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for functions")
	}

CacheNoHooks:
	if !cached {
		functionInsertCacheMut.Lock()
		functionInsertCache[key] = cache
		functionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Function record using the global executor.
// See Update for more documentation.
func (o *Function) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Function.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Function) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	functionUpdateCacheMut.RLock()
	cache, cached := functionUpdateCache[key]
	functionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			functionAllColumns,
			functionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update functions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"functions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, functionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(functionType, functionMapping, append(wl, functionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update functions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for functions")
	}

	if !cached {
		functionUpdateCacheMut.Lock()
		functionUpdateCache[key] = cache
		functionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q functionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q functionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for functions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for functions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FunctionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FunctionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"functions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in function slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all function")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Function record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Function) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Function record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Function) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Function provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), functionPrimaryKeyMapping)
	sql := "DELETE FROM \"functions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from functions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for functions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q functionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no functionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from functions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for functions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FunctionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FunctionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(functionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"functions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from function slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for functions")
	}

	if len(functionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Function) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Function provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Function) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFunction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunctionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FunctionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FunctionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FunctionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), functionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"functions\".* FROM \"functions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, functionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FunctionSlice")
	}

	*o = slice

	return nil
}

// FunctionExistsG checks if the Function row exists.
func FunctionExistsG(ctx context.Context, iD int64) (bool, error) {
	return FunctionExists(ctx, boil.GetContextDB(), iD)
}

// FunctionExists checks if the Function row exists.
func FunctionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"functions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if functions exists")
	}

	return exists, nil
}
