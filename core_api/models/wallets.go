// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Wallet is an object representing the database table.
type Wallet struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Key       string    `boil:"key" json:"key" toml:"key" yaml:"key"`
	Credits   int64     `boil:"credits" json:"credits" toml:"credits" yaml:"credits"`

	R *walletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L walletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalletColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Key       string
	Credits   string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Key:       "key",
	Credits:   "credits",
}

// Generated where

var WalletWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Key       whereHelperstring
	Credits   whereHelperint64
}{
	ID:        whereHelperint64{field: "\"wallets\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"wallets\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"wallets\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"wallets\".\"deleted_at\""},
	Key:       whereHelperstring{field: "\"wallets\".\"key\""},
	Credits:   whereHelperint64{field: "\"wallets\".\"credits\""},
}

// WalletRels is where relationship names are stored.
var WalletRels = struct {
	Users string
}{
	Users: "Users",
}

// walletR is where relationships are stored.
type walletR struct {
	Users UserSlice
}

// NewStruct creates a new relationship struct
func (*walletR) NewStruct() *walletR {
	return &walletR{}
}

// walletL is where Load methods for each relationship are stored.
type walletL struct{}

var (
	walletAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "key", "credits"}
	walletColumnsWithoutDefault = []string{}
	walletColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "key", "credits"}
	walletPrimaryKeyColumns     = []string{"id"}
)

type (
	// WalletSlice is an alias for a slice of pointers to Wallet.
	// This should generally be used opposed to []Wallet.
	WalletSlice []*Wallet
	// WalletHook is the signature for custom Wallet hook methods
	WalletHook func(context.Context, boil.ContextExecutor, *Wallet) error

	walletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walletType                 = reflect.TypeOf(&Wallet{})
	walletMapping              = queries.MakeStructMapping(walletType)
	walletPrimaryKeyMapping, _ = queries.BindMapping(walletType, walletMapping, walletPrimaryKeyColumns)
	walletInsertCacheMut       sync.RWMutex
	walletInsertCache          = make(map[string]insertCache)
	walletUpdateCacheMut       sync.RWMutex
	walletUpdateCache          = make(map[string]updateCache)
	walletUpsertCacheMut       sync.RWMutex
	walletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var walletBeforeInsertHooks []WalletHook
var walletBeforeUpdateHooks []WalletHook
var walletBeforeDeleteHooks []WalletHook
var walletBeforeUpsertHooks []WalletHook

var walletAfterInsertHooks []WalletHook
var walletAfterSelectHooks []WalletHook
var walletAfterUpdateHooks []WalletHook
var walletAfterDeleteHooks []WalletHook
var walletAfterUpsertHooks []WalletHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Wallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Wallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Wallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Wallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Wallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Wallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Wallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Wallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Wallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range walletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWalletHook registers your hook function for all future operations.
func AddWalletHook(hookPoint boil.HookPoint, walletHook WalletHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		walletBeforeInsertHooks = append(walletBeforeInsertHooks, walletHook)
	case boil.BeforeUpdateHook:
		walletBeforeUpdateHooks = append(walletBeforeUpdateHooks, walletHook)
	case boil.BeforeDeleteHook:
		walletBeforeDeleteHooks = append(walletBeforeDeleteHooks, walletHook)
	case boil.BeforeUpsertHook:
		walletBeforeUpsertHooks = append(walletBeforeUpsertHooks, walletHook)
	case boil.AfterInsertHook:
		walletAfterInsertHooks = append(walletAfterInsertHooks, walletHook)
	case boil.AfterSelectHook:
		walletAfterSelectHooks = append(walletAfterSelectHooks, walletHook)
	case boil.AfterUpdateHook:
		walletAfterUpdateHooks = append(walletAfterUpdateHooks, walletHook)
	case boil.AfterDeleteHook:
		walletAfterDeleteHooks = append(walletAfterDeleteHooks, walletHook)
	case boil.AfterUpsertHook:
		walletAfterUpsertHooks = append(walletAfterUpsertHooks, walletHook)
	}
}

// OneG returns a single wallet record from the query using the global executor.
func (q walletQuery) OneG(ctx context.Context) (*Wallet, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single wallet record from the query.
func (q walletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Wallet, error) {
	o := &Wallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wallets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Wallet records from the query using the global executor.
func (q walletQuery) AllG(ctx context.Context) (WalletSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Wallet records from the query.
func (q walletQuery) All(ctx context.Context, exec boil.ContextExecutor) (WalletSlice, error) {
	var o []*Wallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Wallet slice")
	}

	if len(walletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Wallet records in the query, and panics on error.
func (q walletQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Wallet records in the query.
func (q walletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wallets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q walletQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q walletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wallets exists")
	}

	return count > 0, nil
}

// Users retrieves all the user's Users with an executor.
func (o *Wallet) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"rel_user_wallet\" on \"users\".\"id\" = \"rel_user_wallet\".\"user_id\""),
		qm.Where("\"rel_user_wallet\".\"wallet_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (walletL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWallet interface{}, mods queries.Applicator) error {
	var slice []*Wallet
	var object *Wallet

	if singular {
		object = maybeWallet.(*Wallet)
	} else {
		slice = *maybeWallet.(*[]*Wallet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walletR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walletR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"wallet_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"rel_user_wallet\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"wallet_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.Name, &one.Email, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Wallets = append(foreign.R.Wallets, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Wallets = append(foreign.R.Wallets, local)
				break
			}
		}
	}

	return nil
}

// AddUsersG adds the given related objects to the existing relationships
// of the wallet, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Wallets appropriately.
// Uses the global database handle.
func (o *Wallet) AddUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.AddUsers(ctx, boil.GetContextDB(), insert, related...)
}

// AddUsers adds the given related objects to the existing relationships
// of the wallet, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Wallets appropriately.
func (o *Wallet) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"rel_user_wallet\" (\"wallet_id\", \"user_id\") values (?, ?)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &walletR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Wallets: WalletSlice{o},
			}
		} else {
			rel.R.Wallets = append(rel.R.Wallets, o)
		}
	}
	return nil
}

// SetUsersG removes all previously related items of the
// wallet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Wallets's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Wallets's Users accordingly.
// Uses the global database handle.
func (o *Wallet) SetUsersG(ctx context.Context, insert bool, related ...*User) error {
	return o.SetUsers(ctx, boil.GetContextDB(), insert, related...)
}

// SetUsers removes all previously related items of the
// wallet replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Wallets's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.Wallets's Users accordingly.
func (o *Wallet) SetUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"rel_user_wallet\" where \"wallet_id\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromWalletsSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(ctx, exec, insert, related...)
}

// RemoveUsersG relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Wallets.
// Uses the global database handle.
func (o *Wallet) RemoveUsersG(ctx context.Context, related ...*User) error {
	return o.RemoveUsers(ctx, boil.GetContextDB(), related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.Wallets.
func (o *Wallet) RemoveUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"rel_user_wallet\" where \"wallet_id\" = ? and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromWalletsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromWalletsSlice(o *Wallet, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Wallets {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Wallets)
			if ln > 1 && i < ln-1 {
				rel.R.Wallets[i] = rel.R.Wallets[ln-1]
			}
			rel.R.Wallets = rel.R.Wallets[:ln-1]
			break
		}
	}
}

// Wallets retrieves all the records using an executor.
func Wallets(mods ...qm.QueryMod) walletQuery {
	mods = append(mods, qm.From("\"wallets\""))
	return walletQuery{NewQuery(mods...)}
}

// FindWalletG retrieves a single record by ID.
func FindWalletG(ctx context.Context, iD int64, selectCols ...string) (*Wallet, error) {
	return FindWallet(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWallet(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Wallet, error) {
	walletObj := &Wallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wallets\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, walletObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wallets")
	}

	return walletObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Wallet) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Wallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wallets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(walletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walletInsertCacheMut.RLock()
	cache, cached := walletInsertCache[key]
	walletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walletAllColumns,
			walletColumnsWithDefault,
			walletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walletType, walletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walletType, walletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wallets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wallets\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"wallets\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, walletPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wallets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == walletMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for wallets")
	}

CacheNoHooks:
	if !cached {
		walletInsertCacheMut.Lock()
		walletInsertCache[key] = cache
		walletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Wallet record using the global executor.
// See Update for more documentation.
func (o *Wallet) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Wallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Wallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	walletUpdateCacheMut.RLock()
	cache, cached := walletUpdateCache[key]
	walletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walletAllColumns,
			walletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wallets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wallets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, walletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walletType, walletMapping, append(wl, walletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wallets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wallets")
	}

	if !cached {
		walletUpdateCacheMut.Lock()
		walletUpdateCache[key] = cache
		walletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q walletQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q walletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wallets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WalletSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wallets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, walletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wallet")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Wallet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Wallet) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Wallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Wallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Wallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walletPrimaryKeyMapping)
	sql := "DELETE FROM \"wallets\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wallets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no walletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wallets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o WalletSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(walletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, walletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallets")
	}

	if len(walletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Wallet) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Wallet provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Wallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWallet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty WalletSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wallets\".* FROM \"wallets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, walletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WalletSlice")
	}

	*o = slice

	return nil
}

// WalletExistsG checks if the Wallet row exists.
func WalletExistsG(ctx context.Context, iD int64) (bool, error) {
	return WalletExists(ctx, boil.GetContextDB(), iD)
}

// WalletExists checks if the Wallet row exists.
func WalletExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wallets\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wallets exists")
	}

	return exists, nil
}
