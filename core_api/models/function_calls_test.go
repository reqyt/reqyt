// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFunctionCalls(t *testing.T) {
	t.Parallel()

	query := FunctionCalls()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFunctionCallsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFunctionCallsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FunctionCalls().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFunctionCallsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FunctionCallSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFunctionCallsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FunctionCallExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FunctionCall exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FunctionCallExists to return true, but got false.")
	}
}

func testFunctionCallsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	functionCallFound, err := FindFunctionCall(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if functionCallFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFunctionCallsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FunctionCalls().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFunctionCallsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FunctionCalls().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFunctionCallsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	functionCallOne := &FunctionCall{}
	functionCallTwo := &FunctionCall{}
	if err = randomize.Struct(seed, functionCallOne, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}
	if err = randomize.Struct(seed, functionCallTwo, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = functionCallOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = functionCallTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FunctionCalls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFunctionCallsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	functionCallOne := &FunctionCall{}
	functionCallTwo := &FunctionCall{}
	if err = randomize.Struct(seed, functionCallOne, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}
	if err = randomize.Struct(seed, functionCallTwo, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = functionCallOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = functionCallTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func functionCallBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func functionCallAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FunctionCall) error {
	*o = FunctionCall{}
	return nil
}

func testFunctionCallsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FunctionCall{}
	o := &FunctionCall{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, functionCallDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FunctionCall object: %s", err)
	}

	AddFunctionCallHook(boil.BeforeInsertHook, functionCallBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	functionCallBeforeInsertHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.AfterInsertHook, functionCallAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	functionCallAfterInsertHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.AfterSelectHook, functionCallAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	functionCallAfterSelectHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.BeforeUpdateHook, functionCallBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	functionCallBeforeUpdateHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.AfterUpdateHook, functionCallAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	functionCallAfterUpdateHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.BeforeDeleteHook, functionCallBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	functionCallBeforeDeleteHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.AfterDeleteHook, functionCallAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	functionCallAfterDeleteHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.BeforeUpsertHook, functionCallBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	functionCallBeforeUpsertHooks = []FunctionCallHook{}

	AddFunctionCallHook(boil.AfterUpsertHook, functionCallAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	functionCallAfterUpsertHooks = []FunctionCallHook{}
}

func testFunctionCallsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFunctionCallsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(functionCallColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFunctionCallToOneFunctionUsingWallet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FunctionCall
	var foreign Function

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, functionDBTypes, false, functionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Function struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WalletID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Wallet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FunctionCallSlice{&local}
	if err = local.L.LoadWallet(ctx, tx, false, (*[]*FunctionCall)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Wallet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Wallet = nil
	if err = local.L.LoadWallet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Wallet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFunctionCallToOneFunctionUsingFunction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FunctionCall
	var foreign Function

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, functionCallDBTypes, false, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, functionDBTypes, false, functionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Function struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FunctionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Function().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FunctionCallSlice{&local}
	if err = local.L.LoadFunction(ctx, tx, false, (*[]*FunctionCall)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Function == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Function = nil
	if err = local.L.LoadFunction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Function == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFunctionCallToOneSetOpFunctionUsingWallet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FunctionCall
	var b, c Function

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, functionCallDBTypes, false, strmangle.SetComplement(functionCallPrimaryKeyColumns, functionCallColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, functionDBTypes, false, strmangle.SetComplement(functionPrimaryKeyColumns, functionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, functionDBTypes, false, strmangle.SetComplement(functionPrimaryKeyColumns, functionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Function{&b, &c} {
		err = a.SetWallet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Wallet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WalletFunctionCalls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WalletID != x.ID {
			t.Error("foreign key was wrong value", a.WalletID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WalletID))
		reflect.Indirect(reflect.ValueOf(&a.WalletID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WalletID != x.ID {
			t.Error("foreign key was wrong value", a.WalletID, x.ID)
		}
	}
}
func testFunctionCallToOneSetOpFunctionUsingFunction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FunctionCall
	var b, c Function

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, functionCallDBTypes, false, strmangle.SetComplement(functionCallPrimaryKeyColumns, functionCallColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, functionDBTypes, false, strmangle.SetComplement(functionPrimaryKeyColumns, functionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, functionDBTypes, false, strmangle.SetComplement(functionPrimaryKeyColumns, functionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Function{&b, &c} {
		err = a.SetFunction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Function != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FunctionCalls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FunctionID != x.ID {
			t.Error("foreign key was wrong value", a.FunctionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FunctionID))
		reflect.Indirect(reflect.ValueOf(&a.FunctionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FunctionID != x.ID {
			t.Error("foreign key was wrong value", a.FunctionID, x.ID)
		}
	}
}

func testFunctionCallsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFunctionCallsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FunctionCallSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFunctionCallsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FunctionCalls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	functionCallDBTypes = map[string]string{`ID`: `INTEGER`, `CreatedAt`: `DATETIME`, `UpdatedAt`: `DATETIME`, `DeletedAt`: `DATETIME`, `FunctionID`: `INTEGER`, `WalletID`: `INTEGER`, `Credits`: `BIGINT`}
	_                   = bytes.MinRead
)

func testFunctionCallsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(functionCallPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(functionCallAllColumns) == len(functionCallPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFunctionCallsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(functionCallAllColumns) == len(functionCallPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FunctionCall{}
	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FunctionCalls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, functionCallDBTypes, true, functionCallPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FunctionCall struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(functionCallAllColumns, functionCallPrimaryKeyColumns) {
		fields = functionCallAllColumns
	} else {
		fields = strmangle.SetComplement(
			functionCallAllColumns,
			functionCallPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FunctionCallSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
